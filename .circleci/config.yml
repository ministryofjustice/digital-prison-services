version: 2.1
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - aws-cli/install
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.0.2
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
  deploy_to_env:
    parameters:
      env:
        type: string
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            APP_VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
            sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/git/helm_deploy/prison-staff-hub/Chart.yaml
            aws secretsmanager get-secret-value --secret-id ${AWS_SECRET_NAME} | jq -r .SecretString | \
            helm upgrade prison-staff-hub ~/git/helm_deploy/prison-staff-hub/. \
              --install --wait --reset-values --timeout 5m --history-max 10 \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --set image.tag="${APP_VERSION}"
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: circleci/node:10.15.3-browsers
    working_directory: ~/app

orbs:
  aws-cli: circleci/aws-cli@0.1.18
  kubernetes: circleci/kubernetes@0.10.1
  helm: circleci/helm@0.2.3

jobs:
  validate:
    executor: builder
    steps:
      - checkout
      - helm/install-helm-client:
          version: v2.13.1
      - run:
          name: Run helm lint
          command: helm lint prison-staff-hub --values=values-dev.yaml --values=secrets-example.yaml
          working_directory: helm_deploy
      - restore_cache:
          key: node_modules-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Install Dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          key: node_modules-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run eslint
          command: yarn lint
      - run:
          name: Run Tests
          command: |
             set -e
             yarn test --maxWorkers=2
      - run: NODE_ENV=production yarn build
      - run: |
             DATE=$(date '+%Y-%m-%d')
             export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
             export GIT_REF=${CIRCLE_SHA1}
             yarn record-build-info
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build

  integration_tests:
    working_directory: ~/app
    docker:
      - image: circleci/openjdk:11-jdk-node-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Run the node app.
          command: yarn start-feature
          background: true
#      - run:
#          name: Wait for node app to start
#          command: sleep 5
      - restore_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-{{ checksum "prisonstaffhub-specs/build.gradle" }}
      - run:
          name: Run Integration Tests
          command: ./gradlew build
      - save_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
              - /home/circleci/.gradle/wrapper
      - save_cache:
          key: gradle-cache-{{ checksum "prisonstaffhub-specs/build.gradle" }}
          paths:
              - /home/circleci/.gradle/caches
      - store_artifacts:
          path: prisonstaffhub-specs/build/reports
          destination: integration/spock
      - store_artifacts:
          path: prisonstaffhub-specs/build/geb-reports
          destination: integration/geb
      - store_test_results:
          path: prisonstaffhub-specs/build/test-results

  build:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to docker hub
          command: |
            DATE=$(date '+%Y-%m-%d')
            APP_VERSION=${DATE}.${CIRCLE_BUILD_NUM}

            docker build --rm=false . \
              --build-arg BUILD_NUMBER=$APP_VERSION \
              --build-arg GIT_REF=$CIRCLE_SHA1 \
              --tag "mojdigitalstudio/prisonstaffhub:$APP_VERSION" \
              --label "maintainer=dps-hmpps@digital.justice.gov.uk" \
              --label "app.version=$APP_VERSION" \
              --label "build.version=$APP_VERSION" \
              --label "build.number=$CIRCLE_BUILD_NUM" \
              --label "build.url=$CIRCLE_BUILD_URL" \
              --label "build.gitref=$CIRCLE_SHA1"

            # Copy build-info.json from image
            docker run -it --rm mojdigitalstudio/prisonstaffhub:$APP_VERSION cat /app/build-info.json > build-info.json

            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              #publish to docker hub as the tag
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
              docker tag mojdigitalstudio/prisonstaffhub:$APP_VERSION mojdigitalstudio/prisonstaffhub:latest
              docker push mojdigitalstudio/prisonstaffhub:$APP_VERSION
              docker push mojdigitalstudio/prisonstaffhub:latest
            fi
      - persist_to_workspace:
          root: .
          paths:
            - build-info.json

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"

  security_audit:
    executor: builder
    steps:
      - checkout
      - run:
          name: update-yarn
          command: 'sudo yarn global add yarn'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-yarn
          command: 'yarn --frozen-lockfile --no-audit'
      - run:
          name: run-security-audit
          command: 'yarn security_audit'
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - validate:
          filters:
            tags:
              ignore: /.*/
      - integration_tests:
          requires:
            - validate
      - build:
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
            - build
            - integration_tests
          filters:
            branches:
              only: master
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: prison-staff-hub-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: prison-staff-hub-prod
          requires:
            - request-prod-approval
  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - security_audit
