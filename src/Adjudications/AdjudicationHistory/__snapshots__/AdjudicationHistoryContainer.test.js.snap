// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Adjudication History container should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AdjudicationHistoryContainer
    fieldValues={
      Object {
        "establishment": undefined,
        "fromDate": undefined,
        "offenceId": undefined,
        "toDate": undefined,
      }
    }
    handleError={[MockFunction]}
    history={
      Object {
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    now={"2019-10-10T21:00:00.000Z"}
    offenderNumber="AA123BB"
    pageNumber={0}
    pageSize={20}
    resetErrorDispatch={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    setAdjudicationHistoryFilter={[Function]}
    setAdjudicationHistoryPageNumber={[Function]}
    setAdjudicationHistoryPageSize={[Function]}
    setAdjudicationHistoryResults={[Function]}
    setLoadedDispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            false,
          ],
        ],
      }
    }
    store={
      Object {
        "dispatch": [MockFunction],
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
          ],
        },
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
            ],
          },
        },
        "unsubscribe": undefined,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Connect(AdjudicationHistoryForm)
          reset={[Function]}
          search={[Function]}
        />,
        <Connect(AdjudicationHistoryTable)
          changePage={[Function]}
          changePerPage={[Function]}
        />,
      ],
      "title": "Adjudication history",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "reset": [Function],
          "search": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "changePage": [Function],
          "changePerPage": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Connect(AdjudicationHistoryForm)
            reset={[Function]}
            search={[Function]}
          />,
          <Connect(AdjudicationHistoryTable)
            changePage={[Function]}
            changePerPage={[Function]}
          />,
        ],
        "title": "Adjudication history",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "reset": [Function],
            "search": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "changePage": [Function],
            "changePerPage": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
