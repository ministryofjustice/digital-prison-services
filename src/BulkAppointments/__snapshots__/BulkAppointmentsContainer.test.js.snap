// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Bulk appointments container should render completed step 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BulkAppointmentsContainer
    agencyId="LEI"
    handleError={[Function]}
    notmEndpointUrl="/"
    now={"2019-10-10T21:00:00.000Z"}
    raiseAnalyticsEvent={[Function]}
    resetErrorDispatch={[Function]}
    setLoadedDispatch={[Function]}
    store={
      Object {
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "type": "RESET_ERROR",
              },
            ],
            Array [
              Object {
                "loaded": true,
                "type": "SET_LOADED",
              },
            ],
            Array [
              Object {
                "title": "Bulk Appointments",
                "type": "SET_APPLICATION_TITLE",
              },
            ],
            Array [
              Object {
                "type": "RESET_ERROR",
              },
            ],
            Array [
              Object {
                "loaded": true,
                "type": "SET_LOADED",
              },
            ],
            Array [
              Object {
                "title": "Bulk Appointments",
                "type": "SET_APPLICATION_TITLE",
              },
            ],
            Array [
              Object {
                "type": "RESET_ERROR",
              },
            ],
            Array [
              Object {
                "loaded": true,
                "type": "SET_LOADED",
              },
            ],
            Array [
              Object {
                "title": "Bulk Appointments",
                "type": "SET_APPLICATION_TITLE",
              },
            ],
          ],
        },
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
            Array [],
            Array [],
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
            Array [
              [Function],
            ],
            Array [
              [Function],
            ],
          ],
        },
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "type": "RESET_ERROR",
                },
              ],
              Array [
                Object {
                  "loaded": true,
                  "type": "SET_LOADED",
                },
              ],
              Array [
                Object {
                  "title": "Bulk Appointments",
                  "type": "SET_APPLICATION_TITLE",
                },
              ],
              Array [
                Object {
                  "type": "RESET_ERROR",
                },
              ],
              Array [
                Object {
                  "loaded": true,
                  "type": "SET_LOADED",
                },
              ],
              Array [
                Object {
                  "title": "Bulk Appointments",
                  "type": "SET_APPLICATION_TITLE",
                },
              ],
              Array [
                Object {
                  "type": "RESET_ERROR",
                },
              ],
              Array [
                Object {
                  "loaded": true,
                  "type": "SET_LOADED",
                },
              ],
              Array [
                Object {
                  "title": "Bulk Appointments",
                  "type": "SET_APPLICATION_TITLE",
                },
              ],
            ],
          },
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
              Array [],
              Array [],
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
              Array [
                [Function],
              ],
              Array [
                [Function],
              ],
            ],
          },
        },
        "unsubscribe": undefined,
      }
    }
    titleDispatch={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "alwaysRender": true,
      "children": Array [
        <div>
          <H3>
             Appointments have been successfully created. 
          </H3>
          <div>
            <StyledHoc
              buttonColour={undefined}
              buttonHoverColour={undefined}
              buttonShadowColour={undefined}
              buttonTextColour={undefined}
              disabled={false}
              icon={
                <ButtonArrow
                  fill="currentColor"
                  title="ButtonArrow"
                />
              }
              onClick={[Function]}
              start={false}
            >
              Start again
            </StyledHoc>
          </div>
        </div>,
        false,
      ],
      "title": "Add bulk appointments",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <H3>
               Appointments have been successfully created. 
            </H3>,
            <div>
              <StyledHoc
                buttonColour={undefined}
                buttonHoverColour={undefined}
                buttonShadowColour={undefined}
                buttonTextColour={undefined}
                disabled={false}
                icon={
                  <ButtonArrow
                    fill="currentColor"
                    title="ButtonArrow"
                  />
                }
                onClick={[Function]}
                start={false}
              >
                Start again
              </StyledHoc>
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": " Appointments have been successfully created. ",
            },
            "ref": null,
            "rendered": " Appointments have been successfully created. ",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <StyledHoc
                buttonColour={undefined}
                buttonHoverColour={undefined}
                buttonShadowColour={undefined}
                buttonTextColour={undefined}
                disabled={false}
                icon={
                  <ButtonArrow
                    fill="currentColor"
                    title="ButtonArrow"
                  />
                }
                onClick={[Function]}
                start={false}
              >
                Start again
              </StyledHoc>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "buttonColour": undefined,
                "buttonHoverColour": undefined,
                "buttonShadowColour": undefined,
                "buttonTextColour": undefined,
                "children": "Start again",
                "disabled": false,
                "icon": <ButtonArrow
                  fill="currentColor"
                  title="ButtonArrow"
                />,
                "onClick": [Function],
                "start": false,
              },
              "ref": null,
              "rendered": "Start again",
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      false,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alwaysRender": true,
        "children": Array [
          <div>
            <H3>
               Appointments have been successfully created. 
            </H3>
            <div>
              <StyledHoc
                buttonColour={undefined}
                buttonHoverColour={undefined}
                buttonShadowColour={undefined}
                buttonTextColour={undefined}
                disabled={false}
                icon={
                  <ButtonArrow
                    fill="currentColor"
                    title="ButtonArrow"
                  />
                }
                onClick={[Function]}
                start={false}
              >
                Start again
              </StyledHoc>
            </div>
          </div>,
          false,
        ],
        "title": "Add bulk appointments",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <H3>
                 Appointments have been successfully created. 
              </H3>,
              <div>
                <StyledHoc
                  buttonColour={undefined}
                  buttonHoverColour={undefined}
                  buttonShadowColour={undefined}
                  buttonTextColour={undefined}
                  disabled={false}
                  icon={
                    <ButtonArrow
                      fill="currentColor"
                      title="ButtonArrow"
                    />
                  }
                  onClick={[Function]}
                  start={false}
                >
                  Start again
                </StyledHoc>
              </div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": " Appointments have been successfully created. ",
              },
              "ref": null,
              "rendered": " Appointments have been successfully created. ",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <StyledHoc
                  buttonColour={undefined}
                  buttonHoverColour={undefined}
                  buttonShadowColour={undefined}
                  buttonTextColour={undefined}
                  disabled={false}
                  icon={
                    <ButtonArrow
                      fill="currentColor"
                      title="ButtonArrow"
                    />
                  }
                  onClick={[Function]}
                  start={false}
                >
                  Start again
                </StyledHoc>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonColour": undefined,
                  "buttonHoverColour": undefined,
                  "buttonShadowColour": undefined,
                  "buttonTextColour": undefined,
                  "children": "Start again",
                  "disabled": false,
                  "icon": <ButtonArrow
                    fill="currentColor"
                    title="ButtonArrow"
                  />,
                  "onClick": [Function],
                  "start": false,
                },
                "ref": null,
                "rendered": "Start again",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        false,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Bulk appointments container should render default step 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BulkAppointmentsContainer
    agencyId="LEI"
    handleError={[Function]}
    notmEndpointUrl="/"
    now={"2019-10-10T21:00:00.000Z"}
    raiseAnalyticsEvent={[Function]}
    resetErrorDispatch={[Function]}
    setLoadedDispatch={[Function]}
    store={
      Object {
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "type": "RESET_ERROR",
              },
            ],
            Array [
              Object {
                "loaded": true,
                "type": "SET_LOADED",
              },
            ],
            Array [
              Object {
                "title": "Bulk Appointments",
                "type": "SET_APPLICATION_TITLE",
              },
            ],
          ],
        },
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
          ],
        },
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "type": "RESET_ERROR",
                },
              ],
              Array [
                Object {
                  "loaded": true,
                  "type": "SET_LOADED",
                },
              ],
              Array [
                Object {
                  "title": "Bulk Appointments",
                  "type": "SET_APPLICATION_TITLE",
                },
              ],
            ],
          },
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
            ],
          },
        },
        "unsubscribe": undefined,
      }
    }
    titleDispatch={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "alwaysRender": true,
      "children": Array [
        undefined,
        <div>
          <WithDataSource
            render={[Function]}
            request={
              Object {
                "params": Object {
                  "agencyId": "LEI",
                },
                "url": "/api/bulk-appointments/view-model",
              }
            }
          />
        </div>,
      ],
      "title": "Add bulk appointments",
    },
    "ref": null,
    "rendered": Array [
      undefined,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <WithDataSource
              render={[Function]}
              request={
                Object {
                  "params": Object {
                    "agencyId": "LEI",
                  },
                  "url": "/api/bulk-appointments/view-model",
                }
              }
            />,
            false,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "render": [Function],
              "request": Object {
                "params": Object {
                  "agencyId": "LEI",
                },
                "url": "/api/bulk-appointments/view-model",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alwaysRender": true,
        "children": Array [
          undefined,
          <div>
            <WithDataSource
              render={[Function]}
              request={
                Object {
                  "params": Object {
                    "agencyId": "LEI",
                  },
                  "url": "/api/bulk-appointments/view-model",
                }
              }
            />
          </div>,
        ],
        "title": "Add bulk appointments",
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <WithDataSource
                render={[Function]}
                request={
                  Object {
                    "params": Object {
                      "agencyId": "LEI",
                    },
                    "url": "/api/bulk-appointments/view-model",
                  }
                }
              />,
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "render": [Function],
                "request": Object {
                  "params": Object {
                    "agencyId": "LEI",
                  },
                  "url": "/api/bulk-appointments/view-model",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Bulk appointments container should render offender step 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BulkAppointmentsContainer
    agencyId="LEI"
    handleError={[Function]}
    notmEndpointUrl="/"
    now={"2019-10-10T21:00:00.000Z"}
    raiseAnalyticsEvent={[Function]}
    resetErrorDispatch={[Function]}
    setLoadedDispatch={[Function]}
    store={
      Object {
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "type": "RESET_ERROR",
              },
            ],
            Array [
              Object {
                "loaded": true,
                "type": "SET_LOADED",
              },
            ],
            Array [
              Object {
                "title": "Bulk Appointments",
                "type": "SET_APPLICATION_TITLE",
              },
            ],
            Array [
              Object {
                "type": "RESET_ERROR",
              },
            ],
            Array [
              Object {
                "loaded": true,
                "type": "SET_LOADED",
              },
            ],
            Array [
              Object {
                "title": "Bulk Appointments",
                "type": "SET_APPLICATION_TITLE",
              },
            ],
          ],
        },
        "getState": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
            Array [],
            Array [],
          ],
        },
        "subscribe": [MockFunction] {
          "calls": Array [
            Array [
              [Function],
            ],
            Array [
              [Function],
            ],
          ],
        },
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "type": "RESET_ERROR",
                },
              ],
              Array [
                Object {
                  "loaded": true,
                  "type": "SET_LOADED",
                },
              ],
              Array [
                Object {
                  "title": "Bulk Appointments",
                  "type": "SET_APPLICATION_TITLE",
                },
              ],
              Array [
                Object {
                  "type": "RESET_ERROR",
                },
              ],
              Array [
                Object {
                  "loaded": true,
                  "type": "SET_LOADED",
                },
              ],
              Array [
                Object {
                  "title": "Bulk Appointments",
                  "type": "SET_APPLICATION_TITLE",
                },
              ],
            ],
          },
          "getState": [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
              Array [],
              Array [],
            ],
          },
          "subscribe": [MockFunction] {
            "calls": Array [
              Array [
                [Function],
              ],
              Array [
                [Function],
              ],
            ],
          },
        },
        "unsubscribe": undefined,
      }
    }
    titleDispatch={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "alwaysRender": true,
      "children": Array [
        undefined,
        <div>
          <Styled(form)>
            <StyledHoc
              onClick={[Function]}
            >
               Back
            </StyledHoc>
            <ChooseOffenders
              onError={[Function]}
              onSuccess={[Function]}
            />
            <AddAppointmentForm
              appointment={
                Object {
                  "appointmentType": "ACC",
                  "date": "2019-10-10",
                  "locationId": 1,
                  "startTime": "2019-10-10T21:00:00Z",
                }
              }
              date="2019-10-10"
              error=""
              now={"2019-10-10T21:00:00.000Z"}
              offenders={Array []}
              onCancel={[Function]}
              onError={[Function]}
              onSuccess={[Function]}
              resetErrors={[Function]}
              startTime="2019-10-10T21:00:00Z"
            />
          </Styled(form)>
        </div>,
      ],
      "title": "Add bulk appointments",
    },
    "ref": null,
    "rendered": Array [
      undefined,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            false,
            <Styled(form)>
              <StyledHoc
                onClick={[Function]}
              >
                 Back
              </StyledHoc>
              <ChooseOffenders
                onError={[Function]}
                onSuccess={[Function]}
              />
              <AddAppointmentForm
                appointment={
                  Object {
                    "appointmentType": "ACC",
                    "date": "2019-10-10",
                    "locationId": 1,
                    "startTime": "2019-10-10T21:00:00Z",
                  }
                }
                date="2019-10-10"
                error=""
                now={"2019-10-10T21:00:00.000Z"}
                offenders={Array []}
                onCancel={[Function]}
                onError={[Function]}
                onSuccess={[Function]}
                resetErrors={[Function]}
                startTime="2019-10-10T21:00:00Z"
              />
            </Styled(form)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <StyledHoc
                  onClick={[Function]}
                >
                   Back
                </StyledHoc>,
                <ChooseOffenders
                  onError={[Function]}
                  onSuccess={[Function]}
                />,
                <AddAppointmentForm
                  appointment={
                    Object {
                      "appointmentType": "ACC",
                      "date": "2019-10-10",
                      "locationId": 1,
                      "startTime": "2019-10-10T21:00:00Z",
                    }
                  }
                  date="2019-10-10"
                  error=""
                  now={"2019-10-10T21:00:00.000Z"}
                  offenders={Array []}
                  onCancel={[Function]}
                  onError={[Function]}
                  onSuccess={[Function]}
                  resetErrors={[Function]}
                  startTime="2019-10-10T21:00:00Z"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": " Back",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": " Back",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "onError": [Function],
                  "onSuccess": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "appointment": Object {
                    "appointmentType": "ACC",
                    "date": "2019-10-10",
                    "locationId": 1,
                    "startTime": "2019-10-10T21:00:00Z",
                  },
                  "date": "2019-10-10",
                  "error": "",
                  "now": "2019-10-10T21:00:00.000Z",
                  "offenders": Array [],
                  "onCancel": [Function],
                  "onError": [Function],
                  "onSuccess": [Function],
                  "resetErrors": [Function],
                  "startTime": "2019-10-10T21:00:00Z",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alwaysRender": true,
        "children": Array [
          undefined,
          <div>
            <Styled(form)>
              <StyledHoc
                onClick={[Function]}
              >
                 Back
              </StyledHoc>
              <ChooseOffenders
                onError={[Function]}
                onSuccess={[Function]}
              />
              <AddAppointmentForm
                appointment={
                  Object {
                    "appointmentType": "ACC",
                    "date": "2019-10-10",
                    "locationId": 1,
                    "startTime": "2019-10-10T21:00:00Z",
                  }
                }
                date="2019-10-10"
                error=""
                now={"2019-10-10T21:00:00.000Z"}
                offenders={Array []}
                onCancel={[Function]}
                onError={[Function]}
                onSuccess={[Function]}
                resetErrors={[Function]}
                startTime="2019-10-10T21:00:00Z"
              />
            </Styled(form)>
          </div>,
        ],
        "title": "Add bulk appointments",
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              <Styled(form)>
                <StyledHoc
                  onClick={[Function]}
                >
                   Back
                </StyledHoc>
                <ChooseOffenders
                  onError={[Function]}
                  onSuccess={[Function]}
                />
                <AddAppointmentForm
                  appointment={
                    Object {
                      "appointmentType": "ACC",
                      "date": "2019-10-10",
                      "locationId": 1,
                      "startTime": "2019-10-10T21:00:00Z",
                    }
                  }
                  date="2019-10-10"
                  error=""
                  now={"2019-10-10T21:00:00.000Z"}
                  offenders={Array []}
                  onCancel={[Function]}
                  onError={[Function]}
                  onSuccess={[Function]}
                  resetErrors={[Function]}
                  startTime="2019-10-10T21:00:00Z"
                />
              </Styled(form)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <StyledHoc
                    onClick={[Function]}
                  >
                     Back
                  </StyledHoc>,
                  <ChooseOffenders
                    onError={[Function]}
                    onSuccess={[Function]}
                  />,
                  <AddAppointmentForm
                    appointment={
                      Object {
                        "appointmentType": "ACC",
                        "date": "2019-10-10",
                        "locationId": 1,
                        "startTime": "2019-10-10T21:00:00Z",
                      }
                    }
                    date="2019-10-10"
                    error=""
                    now={"2019-10-10T21:00:00.000Z"}
                    offenders={Array []}
                    onCancel={[Function]}
                    onError={[Function]}
                    onSuccess={[Function]}
                    resetErrors={[Function]}
                    startTime="2019-10-10T21:00:00Z"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": " Back",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": " Back",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "onError": [Function],
                    "onSuccess": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "appointment": Object {
                      "appointmentType": "ACC",
                      "date": "2019-10-10",
                      "locationId": 1,
                      "startTime": "2019-10-10T21:00:00Z",
                    },
                    "date": "2019-10-10",
                    "error": "",
                    "now": "2019-10-10T21:00:00.000Z",
                    "offenders": Array [],
                    "onCancel": [Function],
                    "onError": [Function],
                    "onSuccess": [Function],
                    "resetErrors": [Function],
                    "startTime": "2019-10-10T21:00:00Z",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
