// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Add appointment form Form should pass correct props to all fields 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FormFields
    date="2019-10-10T22:00:00Z"
    error={null}
    errors={
      Array [
        Object {
          "targetName": "start-time-offenderNo1",
          "text": "Start test message",
        },
        Object {
          "targetName": "start-time-offenderNo2",
          "text": "Start test message",
        },
      ]
    }
    now={"2019-10-10T21:00:00.000Z"}
    offenders={
      Array [
        Object {
          "bookingId": 1,
          "firstName": "firstName1",
          "lastName": "lastName1",
          "offenderNo": "offenderNo1",
        },
        Object {
          "bookingId": 2,
          "firstName": "firstName2",
          "lastName": "lastName2",
          "offenderNo": "offenderNo2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        null,
        <StyledHoc
          description={undefined}
          errors={
            Array [
              Object {
                "targetName": "start-time-offenderNo1",
                "text": "Start test message",
              },
              Object {
                "targetName": "start-time-offenderNo2",
                "text": "Start test message",
              },
            ]
          }
          heading="There is a problem"
          onHandleErrorClick={[Function]}
        />,
        <Styled(table)
          className="row-gutters"
        >
          <thead>
            <tr>
              <th
                className="straight width5"
              >
                 Prison number 
              </th>
              <th
                className="straight width5"
              >
                 Last name 
              </th>
              <th
                className="straight width5"
              >
                 First name 
              </th>
              <th
                className="straight width5"
              >
                 Start time 
              </th>
            </tr>
          </thead>
          <tbody>
            <tr
              className="row-gutters"
            >
              <td
                className="row-gutters"
              >
                offenderNo1
              </td>
              <td
                className="row-gutters"
              >
                lastName1
              </td>
              <td
                className="row-gutters"
              >
                firstName1
              </td>
              <td
                className="row-gutters"
              >
                <FieldWithError
                  name="start-time-offenderNo1"
                  render={[Function]}
                />
              </td>
            </tr>
            <tr
              className="row-gutters"
            >
              <td
                className="row-gutters"
              >
                offenderNo2
              </td>
              <td
                className="row-gutters"
              >
                lastName2
              </td>
              <td
                className="row-gutters"
              >
                firstName2
              </td>
              <td
                className="row-gutters"
              >
                <FieldWithError
                  name="start-time-offenderNo2"
                  render={[Function]}
                />
              </td>
            </tr>
          </tbody>
        </Styled(table)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "description": undefined,
          "errors": Array [
            Object {
              "targetName": "start-time-offenderNo1",
              "text": "Start test message",
            },
            Object {
              "targetName": "start-time-offenderNo2",
              "text": "Start test message",
            },
          ],
          "heading": "There is a problem",
          "onHandleErrorClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <thead>
              <tr>
                <th
                  className="straight width5"
                >
                   Prison number 
                </th>
                <th
                  className="straight width5"
                >
                   Last name 
                </th>
                <th
                  className="straight width5"
                >
                   First name 
                </th>
                <th
                  className="straight width5"
                >
                   Start time 
                </th>
              </tr>
            </thead>,
            <tbody>
              <tr
                className="row-gutters"
              >
                <td
                  className="row-gutters"
                >
                  offenderNo1
                </td>
                <td
                  className="row-gutters"
                >
                  lastName1
                </td>
                <td
                  className="row-gutters"
                >
                  firstName1
                </td>
                <td
                  className="row-gutters"
                >
                  <FieldWithError
                    name="start-time-offenderNo1"
                    render={[Function]}
                  />
                </td>
              </tr>
              <tr
                className="row-gutters"
              >
                <td
                  className="row-gutters"
                >
                  offenderNo2
                </td>
                <td
                  className="row-gutters"
                >
                  lastName2
                </td>
                <td
                  className="row-gutters"
                >
                  firstName2
                </td>
                <td
                  className="row-gutters"
                >
                  <FieldWithError
                    name="start-time-offenderNo2"
                    render={[Function]}
                  />
                </td>
              </tr>
            </tbody>,
          ],
          "className": "row-gutters",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <tr>
                <th
                  className="straight width5"
                >
                   Prison number 
                </th>
                <th
                  className="straight width5"
                >
                   Last name 
                </th>
                <th
                  className="straight width5"
                >
                   First name 
                </th>
                <th
                  className="straight width5"
                >
                   Start time 
                </th>
              </tr>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <th
                    className="straight width5"
                  >
                     Prison number 
                  </th>,
                  <th
                    className="straight width5"
                  >
                     Last name 
                  </th>,
                  <th
                    className="straight width5"
                  >
                     First name 
                  </th>,
                  <th
                    className="straight width5"
                  >
                     Start time 
                  </th>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": " Prison number ",
                    "className": "straight width5",
                  },
                  "ref": null,
                  "rendered": " Prison number ",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": " Last name ",
                    "className": "straight width5",
                  },
                  "ref": null,
                  "rendered": " Last name ",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": " First name ",
                    "className": "straight width5",
                  },
                  "ref": null,
                  "rendered": " First name ",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": " Start time ",
                    "className": "straight width5",
                  },
                  "ref": null,
                  "rendered": " Start time ",
                  "type": "th",
                },
              ],
              "type": "tr",
            },
            "type": "thead",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <tr
                  className="row-gutters"
                >
                  <td
                    className="row-gutters"
                  >
                    offenderNo1
                  </td>
                  <td
                    className="row-gutters"
                  >
                    lastName1
                  </td>
                  <td
                    className="row-gutters"
                  >
                    firstName1
                  </td>
                  <td
                    className="row-gutters"
                  >
                    <FieldWithError
                      name="start-time-offenderNo1"
                      render={[Function]}
                    />
                  </td>
                </tr>,
                <tr
                  className="row-gutters"
                >
                  <td
                    className="row-gutters"
                  >
                    offenderNo2
                  </td>
                  <td
                    className="row-gutters"
                  >
                    lastName2
                  </td>
                  <td
                    className="row-gutters"
                  >
                    firstName2
                  </td>
                  <td
                    className="row-gutters"
                  >
                    <FieldWithError
                      name="start-time-offenderNo2"
                      render={[Function]}
                    />
                  </td>
                </tr>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "offenderNo1",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <td
                      className="row-gutters"
                    >
                      offenderNo1
                    </td>,
                    <td
                      className="row-gutters"
                    >
                      lastName1
                    </td>,
                    <td
                      className="row-gutters"
                    >
                      firstName1
                    </td>,
                    <td
                      className="row-gutters"
                    >
                      <FieldWithError
                        name="start-time-offenderNo1"
                        render={[Function]}
                      />
                    </td>,
                  ],
                  "className": "row-gutters",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "offenderNo1",
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": "offenderNo1",
                    "type": "td",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "lastName1",
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": "lastName1",
                    "type": "td",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "firstName1",
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": "firstName1",
                    "type": "td",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FieldWithError
                        name="start-time-offenderNo1"
                        render={[Function]}
                      />,
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "name": "start-time-offenderNo1",
                        "render": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "td",
                  },
                ],
                "type": "tr",
              },
              Object {
                "instance": null,
                "key": "offenderNo2",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <td
                      className="row-gutters"
                    >
                      offenderNo2
                    </td>,
                    <td
                      className="row-gutters"
                    >
                      lastName2
                    </td>,
                    <td
                      className="row-gutters"
                    >
                      firstName2
                    </td>,
                    <td
                      className="row-gutters"
                    >
                      <FieldWithError
                        name="start-time-offenderNo2"
                        render={[Function]}
                      />
                    </td>,
                  ],
                  "className": "row-gutters",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "offenderNo2",
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": "offenderNo2",
                    "type": "td",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "lastName2",
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": "lastName2",
                    "type": "td",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "firstName2",
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": "firstName2",
                    "type": "td",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FieldWithError
                        name="start-time-offenderNo2"
                        render={[Function]}
                      />,
                      "className": "row-gutters",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "name": "start-time-offenderNo2",
                        "render": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "td",
                  },
                ],
                "type": "tr",
              },
            ],
            "type": "tbody",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          null,
          <StyledHoc
            description={undefined}
            errors={
              Array [
                Object {
                  "targetName": "start-time-offenderNo1",
                  "text": "Start test message",
                },
                Object {
                  "targetName": "start-time-offenderNo2",
                  "text": "Start test message",
                },
              ]
            }
            heading="There is a problem"
            onHandleErrorClick={[Function]}
          />,
          <Styled(table)
            className="row-gutters"
          >
            <thead>
              <tr>
                <th
                  className="straight width5"
                >
                   Prison number 
                </th>
                <th
                  className="straight width5"
                >
                   Last name 
                </th>
                <th
                  className="straight width5"
                >
                   First name 
                </th>
                <th
                  className="straight width5"
                >
                   Start time 
                </th>
              </tr>
            </thead>
            <tbody>
              <tr
                className="row-gutters"
              >
                <td
                  className="row-gutters"
                >
                  offenderNo1
                </td>
                <td
                  className="row-gutters"
                >
                  lastName1
                </td>
                <td
                  className="row-gutters"
                >
                  firstName1
                </td>
                <td
                  className="row-gutters"
                >
                  <FieldWithError
                    name="start-time-offenderNo1"
                    render={[Function]}
                  />
                </td>
              </tr>
              <tr
                className="row-gutters"
              >
                <td
                  className="row-gutters"
                >
                  offenderNo2
                </td>
                <td
                  className="row-gutters"
                >
                  lastName2
                </td>
                <td
                  className="row-gutters"
                >
                  firstName2
                </td>
                <td
                  className="row-gutters"
                >
                  <FieldWithError
                    name="start-time-offenderNo2"
                    render={[Function]}
                  />
                </td>
              </tr>
            </tbody>
          </Styled(table)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "description": undefined,
            "errors": Array [
              Object {
                "targetName": "start-time-offenderNo1",
                "text": "Start test message",
              },
              Object {
                "targetName": "start-time-offenderNo2",
                "text": "Start test message",
              },
            ],
            "heading": "There is a problem",
            "onHandleErrorClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <thead>
                <tr>
                  <th
                    className="straight width5"
                  >
                     Prison number 
                  </th>
                  <th
                    className="straight width5"
                  >
                     Last name 
                  </th>
                  <th
                    className="straight width5"
                  >
                     First name 
                  </th>
                  <th
                    className="straight width5"
                  >
                     Start time 
                  </th>
                </tr>
              </thead>,
              <tbody>
                <tr
                  className="row-gutters"
                >
                  <td
                    className="row-gutters"
                  >
                    offenderNo1
                  </td>
                  <td
                    className="row-gutters"
                  >
                    lastName1
                  </td>
                  <td
                    className="row-gutters"
                  >
                    firstName1
                  </td>
                  <td
                    className="row-gutters"
                  >
                    <FieldWithError
                      name="start-time-offenderNo1"
                      render={[Function]}
                    />
                  </td>
                </tr>
                <tr
                  className="row-gutters"
                >
                  <td
                    className="row-gutters"
                  >
                    offenderNo2
                  </td>
                  <td
                    className="row-gutters"
                  >
                    lastName2
                  </td>
                  <td
                    className="row-gutters"
                  >
                    firstName2
                  </td>
                  <td
                    className="row-gutters"
                  >
                    <FieldWithError
                      name="start-time-offenderNo2"
                      render={[Function]}
                    />
                  </td>
                </tr>
              </tbody>,
            ],
            "className": "row-gutters",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <tr>
                  <th
                    className="straight width5"
                  >
                     Prison number 
                  </th>
                  <th
                    className="straight width5"
                  >
                     Last name 
                  </th>
                  <th
                    className="straight width5"
                  >
                     First name 
                  </th>
                  <th
                    className="straight width5"
                  >
                     Start time 
                  </th>
                </tr>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <th
                      className="straight width5"
                    >
                       Prison number 
                    </th>,
                    <th
                      className="straight width5"
                    >
                       Last name 
                    </th>,
                    <th
                      className="straight width5"
                    >
                       First name 
                    </th>,
                    <th
                      className="straight width5"
                    >
                       Start time 
                    </th>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " Prison number ",
                      "className": "straight width5",
                    },
                    "ref": null,
                    "rendered": " Prison number ",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " Last name ",
                      "className": "straight width5",
                    },
                    "ref": null,
                    "rendered": " Last name ",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " First name ",
                      "className": "straight width5",
                    },
                    "ref": null,
                    "rendered": " First name ",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " Start time ",
                      "className": "straight width5",
                    },
                    "ref": null,
                    "rendered": " Start time ",
                    "type": "th",
                  },
                ],
                "type": "tr",
              },
              "type": "thead",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <tr
                    className="row-gutters"
                  >
                    <td
                      className="row-gutters"
                    >
                      offenderNo1
                    </td>
                    <td
                      className="row-gutters"
                    >
                      lastName1
                    </td>
                    <td
                      className="row-gutters"
                    >
                      firstName1
                    </td>
                    <td
                      className="row-gutters"
                    >
                      <FieldWithError
                        name="start-time-offenderNo1"
                        render={[Function]}
                      />
                    </td>
                  </tr>,
                  <tr
                    className="row-gutters"
                  >
                    <td
                      className="row-gutters"
                    >
                      offenderNo2
                    </td>
                    <td
                      className="row-gutters"
                    >
                      lastName2
                    </td>
                    <td
                      className="row-gutters"
                    >
                      firstName2
                    </td>
                    <td
                      className="row-gutters"
                    >
                      <FieldWithError
                        name="start-time-offenderNo2"
                        render={[Function]}
                      />
                    </td>
                  </tr>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "offenderNo1",
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <td
                        className="row-gutters"
                      >
                        offenderNo1
                      </td>,
                      <td
                        className="row-gutters"
                      >
                        lastName1
                      </td>,
                      <td
                        className="row-gutters"
                      >
                        firstName1
                      </td>,
                      <td
                        className="row-gutters"
                      >
                        <FieldWithError
                          name="start-time-offenderNo1"
                          render={[Function]}
                        />
                      </td>,
                    ],
                    "className": "row-gutters",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "offenderNo1",
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": "offenderNo1",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "lastName1",
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": "lastName1",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "firstName1",
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": "firstName1",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <FieldWithError
                          name="start-time-offenderNo1"
                          render={[Function]}
                        />,
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "name": "start-time-offenderNo1",
                          "render": [Function],
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": "td",
                    },
                  ],
                  "type": "tr",
                },
                Object {
                  "instance": null,
                  "key": "offenderNo2",
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <td
                        className="row-gutters"
                      >
                        offenderNo2
                      </td>,
                      <td
                        className="row-gutters"
                      >
                        lastName2
                      </td>,
                      <td
                        className="row-gutters"
                      >
                        firstName2
                      </td>,
                      <td
                        className="row-gutters"
                      >
                        <FieldWithError
                          name="start-time-offenderNo2"
                          render={[Function]}
                        />
                      </td>,
                    ],
                    "className": "row-gutters",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "offenderNo2",
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": "offenderNo2",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "lastName2",
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": "lastName2",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "firstName2",
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": "firstName2",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <FieldWithError
                          name="start-time-offenderNo2"
                          render={[Function]}
                        />,
                        "className": "row-gutters",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "name": "start-time-offenderNo2",
                          "render": [Function],
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": "td",
                    },
                  ],
                  "type": "tr",
                },
              ],
              "type": "tbody",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Add appointment form Form should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReactFinalForm
    initialValues={
      Object {
        "start-time-offenderNo1": "2019-10-10T22:00:00Z",
        "start-time-offenderNo2": "2019-10-10T22:00:00Z",
      }
    }
    onSubmit={[Function]}
    render={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <form
        onSubmit={[Function]}
      >
        <H3>
           Selected prisoners 
        </H3>
        <FormFields
          date="2019-10-10T22:00:00Z"
          dispatchAppointmentPrisoners={[Function]}
          error="network error"
          errors={null}
          now={"2019-10-10T21:00:00.000Z"}
          offenders={
            Array [
              Object {
                "bookingId": 1,
                "firstName": "firstName1",
                "lastName": "lastName1",
                "offenderNo": "offenderNo1",
              },
              Object {
                "bookingId": 2,
                "firstName": "firstName2",
                "lastName": "lastName2",
                "offenderNo": "offenderNo2",
              },
            ]
          }
        />
        <Styled(div)>
          <StyledHoc
            buttonColour={undefined}
            buttonHoverColour={undefined}
            buttonShadowColour={undefined}
            buttonTextColour={undefined}
            disabled={false}
            icon={undefined}
            start={false}
            type="submit"
          >
            Add appointment
          </StyledHoc>
          <StyledHoc
            buttonColour="#dee0e2"
            buttonHoverColour={undefined}
            buttonShadowColour={undefined}
            buttonTextColour="#0b0c0c"
            disabled={false}
            icon={undefined}
            onClick={[Function]}
            start={false}
          >
            Cancel
          </StyledHoc>
        </Styled(div)>
      </form>,
      "value": Object {
        "batch": [Function],
        "blur": [Function],
        "change": [Function],
        "focus": [Function],
        "getFieldState": [Function],
        "getRegisteredFields": [Function],
        "getState": [Function],
        "initialize": [Function],
        "isValidationPaused": [Function],
        "mutators": Object {},
        "pauseValidation": [Function],
        "registerField": [Function],
        "reset": [Function],
        "resumeValidation": [Function],
        "setConfig": [Function],
        "submit": [Function],
        "subscribe": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <H3>
             Selected prisoners 
          </H3>,
          <FormFields
            date="2019-10-10T22:00:00Z"
            dispatchAppointmentPrisoners={[Function]}
            error="network error"
            errors={null}
            now={"2019-10-10T21:00:00.000Z"}
            offenders={
              Array [
                Object {
                  "bookingId": 1,
                  "firstName": "firstName1",
                  "lastName": "lastName1",
                  "offenderNo": "offenderNo1",
                },
                Object {
                  "bookingId": 2,
                  "firstName": "firstName2",
                  "lastName": "lastName2",
                  "offenderNo": "offenderNo2",
                },
              ]
            }
          />,
          <Styled(div)>
            <StyledHoc
              buttonColour={undefined}
              buttonHoverColour={undefined}
              buttonShadowColour={undefined}
              buttonTextColour={undefined}
              disabled={false}
              icon={undefined}
              start={false}
              type="submit"
            >
              Add appointment
            </StyledHoc>
            <StyledHoc
              buttonColour="#dee0e2"
              buttonHoverColour={undefined}
              buttonShadowColour={undefined}
              buttonTextColour="#0b0c0c"
              disabled={false}
              icon={undefined}
              onClick={[Function]}
              start={false}
            >
              Cancel
            </StyledHoc>
          </Styled(div)>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": " Selected prisoners ",
          },
          "ref": null,
          "rendered": " Selected prisoners ",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "date": "2019-10-10T22:00:00Z",
            "dispatchAppointmentPrisoners": [Function],
            "error": "network error",
            "errors": null,
            "now": "2019-10-10T21:00:00.000Z",
            "offenders": Array [
              Object {
                "bookingId": 1,
                "firstName": "firstName1",
                "lastName": "lastName1",
                "offenderNo": "offenderNo1",
              },
              Object {
                "bookingId": 2,
                "firstName": "firstName2",
                "lastName": "lastName2",
                "offenderNo": "offenderNo2",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <StyledHoc
                buttonColour={undefined}
                buttonHoverColour={undefined}
                buttonShadowColour={undefined}
                buttonTextColour={undefined}
                disabled={false}
                icon={undefined}
                start={false}
                type="submit"
              >
                Add appointment
              </StyledHoc>,
              <StyledHoc
                buttonColour="#dee0e2"
                buttonHoverColour={undefined}
                buttonShadowColour={undefined}
                buttonTextColour="#0b0c0c"
                disabled={false}
                icon={undefined}
                onClick={[Function]}
                start={false}
              >
                Cancel
              </StyledHoc>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "buttonColour": undefined,
                "buttonHoverColour": undefined,
                "buttonShadowColour": undefined,
                "buttonTextColour": undefined,
                "children": "Add appointment",
                "disabled": false,
                "icon": undefined,
                "start": false,
                "type": "submit",
              },
              "ref": null,
              "rendered": "Add appointment",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "buttonColour": "#dee0e2",
                "buttonHoverColour": undefined,
                "buttonShadowColour": undefined,
                "buttonTextColour": "#0b0c0c",
                "children": "Cancel",
                "disabled": false,
                "icon": undefined,
                "onClick": [Function],
                "start": false,
              },
              "ref": null,
              "rendered": "Cancel",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "form",
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": null,
        "_currentValue2": null,
        "_threadCount": 0,
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <form
          onSubmit={[Function]}
        >
          <H3>
             Selected prisoners 
          </H3>
          <FormFields
            date="2019-10-10T22:00:00Z"
            dispatchAppointmentPrisoners={[Function]}
            error="network error"
            errors={null}
            now={"2019-10-10T21:00:00.000Z"}
            offenders={
              Array [
                Object {
                  "bookingId": 1,
                  "firstName": "firstName1",
                  "lastName": "lastName1",
                  "offenderNo": "offenderNo1",
                },
                Object {
                  "bookingId": 2,
                  "firstName": "firstName2",
                  "lastName": "lastName2",
                  "offenderNo": "offenderNo2",
                },
              ]
            }
          />
          <Styled(div)>
            <StyledHoc
              buttonColour={undefined}
              buttonHoverColour={undefined}
              buttonShadowColour={undefined}
              buttonTextColour={undefined}
              disabled={false}
              icon={undefined}
              start={false}
              type="submit"
            >
              Add appointment
            </StyledHoc>
            <StyledHoc
              buttonColour="#dee0e2"
              buttonHoverColour={undefined}
              buttonShadowColour={undefined}
              buttonTextColour="#0b0c0c"
              disabled={false}
              icon={undefined}
              onClick={[Function]}
              start={false}
            >
              Cancel
            </StyledHoc>
          </Styled(div)>
        </form>,
        "value": Object {
          "batch": [Function],
          "blur": [Function],
          "change": [Function],
          "focus": [Function],
          "getFieldState": [Function],
          "getRegisteredFields": [Function],
          "getState": [Function],
          "initialize": [Function],
          "isValidationPaused": [Function],
          "mutators": Object {},
          "pauseValidation": [Function],
          "registerField": [Function],
          "reset": [Function],
          "resumeValidation": [Function],
          "setConfig": [Function],
          "submit": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <H3>
               Selected prisoners 
            </H3>,
            <FormFields
              date="2019-10-10T22:00:00Z"
              dispatchAppointmentPrisoners={[Function]}
              error="network error"
              errors={null}
              now={"2019-10-10T21:00:00.000Z"}
              offenders={
                Array [
                  Object {
                    "bookingId": 1,
                    "firstName": "firstName1",
                    "lastName": "lastName1",
                    "offenderNo": "offenderNo1",
                  },
                  Object {
                    "bookingId": 2,
                    "firstName": "firstName2",
                    "lastName": "lastName2",
                    "offenderNo": "offenderNo2",
                  },
                ]
              }
            />,
            <Styled(div)>
              <StyledHoc
                buttonColour={undefined}
                buttonHoverColour={undefined}
                buttonShadowColour={undefined}
                buttonTextColour={undefined}
                disabled={false}
                icon={undefined}
                start={false}
                type="submit"
              >
                Add appointment
              </StyledHoc>
              <StyledHoc
                buttonColour="#dee0e2"
                buttonHoverColour={undefined}
                buttonShadowColour={undefined}
                buttonTextColour="#0b0c0c"
                disabled={false}
                icon={undefined}
                onClick={[Function]}
                start={false}
              >
                Cancel
              </StyledHoc>
            </Styled(div)>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": " Selected prisoners ",
            },
            "ref": null,
            "rendered": " Selected prisoners ",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "date": "2019-10-10T22:00:00Z",
              "dispatchAppointmentPrisoners": [Function],
              "error": "network error",
              "errors": null,
              "now": "2019-10-10T21:00:00.000Z",
              "offenders": Array [
                Object {
                  "bookingId": 1,
                  "firstName": "firstName1",
                  "lastName": "lastName1",
                  "offenderNo": "offenderNo1",
                },
                Object {
                  "bookingId": 2,
                  "firstName": "firstName2",
                  "lastName": "lastName2",
                  "offenderNo": "offenderNo2",
                },
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <StyledHoc
                  buttonColour={undefined}
                  buttonHoverColour={undefined}
                  buttonShadowColour={undefined}
                  buttonTextColour={undefined}
                  disabled={false}
                  icon={undefined}
                  start={false}
                  type="submit"
                >
                  Add appointment
                </StyledHoc>,
                <StyledHoc
                  buttonColour="#dee0e2"
                  buttonHoverColour={undefined}
                  buttonShadowColour={undefined}
                  buttonTextColour="#0b0c0c"
                  disabled={false}
                  icon={undefined}
                  onClick={[Function]}
                  start={false}
                >
                  Cancel
                </StyledHoc>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonColour": undefined,
                  "buttonHoverColour": undefined,
                  "buttonShadowColour": undefined,
                  "buttonTextColour": undefined,
                  "children": "Add appointment",
                  "disabled": false,
                  "icon": undefined,
                  "start": false,
                  "type": "submit",
                },
                "ref": null,
                "rendered": "Add appointment",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "buttonColour": "#dee0e2",
                  "buttonHoverColour": undefined,
                  "buttonShadowColour": undefined,
                  "buttonTextColour": "#0b0c0c",
                  "children": "Cancel",
                  "disabled": false,
                  "icon": undefined,
                  "onClick": [Function],
                  "start": false,
                },
                "ref": null,
                "rendered": "Cancel",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": null,
          "_currentValue2": null,
          "_threadCount": 0,
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
