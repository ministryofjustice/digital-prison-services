// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Movements out should render page correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MovementsOut
    movementsOut={
      Array [
        Object {
          "alerts": Array [
            "HA",
            "XSA",
            "XA",
            "PEEP",
            "XEL",
            "XRF",
            "XTACT",
          ],
          "firstName": "firstName",
          "lastName": "lastName",
          "offenderNo": "offenderNo",
          "reasonDescription": "reasonDescription",
          "timeOut": "12:00",
        },
      ]
    }
    setColumnSort={[MockFunction]}
    sortOrder="ASC"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <SortLov
          setColumnSort={[MockFunction]}
          sortColumn="lastName"
          sortColumns={
            Array [
              "lastName",
            ]
          }
          sortOrder="ASC"
        />,
        <MovementsOutTable
          movementsOut={
            Array [
              Object {
                "alerts": Array [
                  "HA",
                  "XSA",
                  "XA",
                  "PEEP",
                  "XEL",
                  "XRF",
                  "XTACT",
                ],
                "firstName": "firstName",
                "lastName": "lastName",
                "offenderNo": "offenderNo",
                "reasonDescription": "reasonDescription",
                "timeOut": "12:00",
              },
            ]
          }
          setColumnSort={[MockFunction]}
          sortOrder="ASC"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "setColumnSort": [MockFunction],
          "sortColumn": "lastName",
          "sortColumns": Array [
            "lastName",
          ],
          "sortOrder": "ASC",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "movementsOut": Array [
            Object {
              "alerts": Array [
                "HA",
                "XSA",
                "XA",
                "PEEP",
                "XEL",
                "XRF",
                "XTACT",
              ],
              "firstName": "firstName",
              "lastName": "lastName",
              "offenderNo": "offenderNo",
              "reasonDescription": "reasonDescription",
              "timeOut": "12:00",
            },
          ],
          "setColumnSort": [MockFunction],
          "sortOrder": "ASC",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <SortLov
            setColumnSort={[MockFunction]}
            sortColumn="lastName"
            sortColumns={
              Array [
                "lastName",
              ]
            }
            sortOrder="ASC"
          />,
          <MovementsOutTable
            movementsOut={
              Array [
                Object {
                  "alerts": Array [
                    "HA",
                    "XSA",
                    "XA",
                    "PEEP",
                    "XEL",
                    "XRF",
                    "XTACT",
                  ],
                  "firstName": "firstName",
                  "lastName": "lastName",
                  "offenderNo": "offenderNo",
                  "reasonDescription": "reasonDescription",
                  "timeOut": "12:00",
                },
              ]
            }
            setColumnSort={[MockFunction]}
            sortOrder="ASC"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "setColumnSort": [MockFunction],
            "sortColumn": "lastName",
            "sortColumns": Array [
              "lastName",
            ],
            "sortOrder": "ASC",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "movementsOut": Array [
              Object {
                "alerts": Array [
                  "HA",
                  "XSA",
                  "XA",
                  "PEEP",
                  "XEL",
                  "XRF",
                  "XTACT",
                ],
                "firstName": "firstName",
                "lastName": "lastName",
                "offenderNo": "offenderNo",
                "reasonDescription": "reasonDescription",
                "timeOut": "12:00",
              },
            ],
            "setColumnSort": [MockFunction],
            "sortOrder": "ASC",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
